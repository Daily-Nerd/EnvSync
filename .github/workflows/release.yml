name: Release

on:
  push:
    tags:
      - 'v*.*.*'   # Release on version tags like v1.2.3
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3 or v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark GitHub release as prerelease'
        required: false
        default: false
        type: boolean

# Principle of least privilege by default. Elevate per job when needed.
permissions:
  contents: read

env:
  TEST_PYPI_INDEX_URL: https://test.pypi.org/legacy/

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Set up uv (fast installer/lock support)
        uses: astral-sh/setup-uv@v4
        with:
          python-version: "3.12"

      - name: UV Sync
        run: |
          uv sync
          source .venv/bin/activate

      - name: Install dev deps
        run: |
          uv pip install -U pip
          uv pip install -e . pre-commit packaging pytest pytest-cov mypy

      - name: Run pre-commit
        run: uv run pre-commit run --all-files

      - name: Extract & classify version (PEP 440)
        id: version
        shell: bash
        run: |
          uv run python - <<'PY'
          import os, sys
          from packaging.version import Version, InvalidVersion

          ev = os.environ.get("GITHUB_EVENT_NAME")
          if ev == "workflow_dispatch":
              raw = os.environ.get("INPUT_VERSION", "")
              if not raw:
                  print("::error::INPUT_VERSION not provided for workflow_dispatch")
                  sys.exit(1)
          else:
              # refs/tags/v1.2.3
              raw = os.environ["GITHUB_REF"].split("/")[-1]
          ver = raw[1:] if raw.startswith("v") else raw

          try:
              v = Version(ver)
          except InvalidVersion:
              print(f"::error::Invalid version: {raw} (normalized: {ver})")
              sys.exit(1)

          is_pre = "true" if (v.is_prerelease or v.is_devrelease) else "false"

          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"version={ver}\n")
              f.write(f"is_prerelease={is_pre}\n")
          PY

      # Only block duplicate version when manually dispatching (tag push already contains the tag)
      - name: Guard duplicate tag (dispatch only)
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists"; exit 1
          fi

      - name: Run tests (unit + type)
        run: |
          pytest --cov=envsync --cov-report=xml
          mypy src/envsync

  tests:
    name: Test Matrix
    runs-on: ubuntu-latest
    needs: validate-release
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - uses: astral-sh/setup-uv@v4
      - run: |
          uv pip install -U pip
          uv pip install -e ".[dev]" pytest
          pytest -q

  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [validate-release, tests]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - uses: astral-sh/setup-uv@v4

      - name: Install build deps
        run: |
          uv pip install -U pip
          uv pip install build twine

      - name: Build (sdist + wheel)
        run: python -m build

      - name: Twine check
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  test-pypi:
    name: Test PyPI Upload
    runs-on: ubuntu-latest
    needs: [validate-release, build-package]
    # Keep your original logic: tag push OR explicit prerelease flag uploads to TestPyPI
    if: github.event_name == 'push' || github.event.inputs.prerelease == 'true'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - uses: astral-sh/setup-uv@v4

      - name: Upload to Test PyPI (API token)
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
          TWINE_REPOSITORY_URL: ${{ env.TEST_PYPI_INDEX_URL }}
        run: |
          uv pip install twine
          twine upload --skip-existing dist/*

      - name: Verify install from Test PyPI (clean venv + retry)
        run: |
          python -m venv .venv && . .venv/bin/activate
          python -m pip install -U pip
          for i in {1..5}; do
            if pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ envsync==${{ needs.validate-release.outputs.version }}; then
              break
            fi
            echo "Retry $i after TestPyPI sync..."; sleep 5
          done
          envsync --version

  pypi:
    name: PyPI Upload (Trusted Publishing)
    runs-on: ubuntu-latest
    needs: [validate-release, build-package, test-pypi]
    if: github.event_name == 'push' && needs.validate-release.outputs.is_prerelease == 'false'
    # OIDC for Trusted Publishing
    permissions:
      contents: read
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/envsync
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      # Publish via OIDC (configure Trusted Publisher in PyPI first)
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages_dir: dist
          # provenance: true   # uncomment after enabling project-wide provenance

      - name: Verify install from PyPI (clean venv + retry)
        run: |
          python -m venv .venv && . .venv/bin/activate
          python -m pip install -U pip
          for i in {1..5}; do
            if pip install envsync==${{ needs.validate-release.outputs.version }}; then
              break
            fi
            echo "Retry $i after PyPI sync..."; sleep 5
          done
          envsync --version

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-package, pypi, test-pypi]
    if: always() && (needs.pypi.result == 'success' || needs.test-pypi.result == 'success')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Generate basic changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          PREV=$(git describe --tags --abbrev=0 v$VERSION^ 2>/dev/null || echo "")
          {
            echo "## What's Changed"
            echo
            if [ -n "$PREV" ]; then
              echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV...v$VERSION"
            else
              echo "Initial release."
            fi
            echo
            echo "## Installation"
            echo
            echo "\`\`\`bash"
            echo "pip install envsync==$VERSION"
            echo "\`\`\`"
            echo
            echo "## Quick Start"
            echo
            echo "\`\`\`python"
            echo "from envsync import env"
            echo "API_KEY = env.require('API_KEY')"
            echo "DATABASE_URL = env.require('DATABASE_URL')"
            echo "DEBUG = env.optional('DEBUG', default=False, type=bool)"
            echo "\`\`\`"
          } > CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: EnvSync v${{ needs.validate-release.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
          files: |
            dist/envsync-${{ needs.validate-release.outputs.version }}-py3-none-any.whl
            dist/envsync-${{ needs.validate-release.outputs.version }}.tar.gz

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    steps:
      - name: Outcome
        run: |
          if [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "‚úÖ Release v${{ needs.validate-release.outputs.version }} published."
            echo "üì¶ PyPI: https://pypi.org/project/envsync/${{ needs.validate-release.outputs.version }}/"
            echo "üè∑Ô∏è GitHub: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }}"
          else
            echo "‚ùå Release failed. Check logs."
          fi
